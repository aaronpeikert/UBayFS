% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/buildUBaymodel.R
\name{build.UBaymodel}
\alias{build.UBaymodel}
\title{Build an ensemble for UBayFS}
\usage{
build.UBaymodel(
  data,
  target,
  M = 100,
  tt_split = 0.75,
  nr_features = 10,
  method = "mrmr",
  A = NULL,
  b = NULL,
  rho = NULL,
  weights = NULL,
  popsize = 50,
  maxiter = 100,
  shiny = FALSE
)
}
\arguments{
\item{data}{a matrix of input data}

\item{target}{a vector (factor) of labels for data}

\item{M}{the number of elementary models in the ensemble}

\item{tt_split}{the ratio of samples drawn for building an elementary model (train-test-split)}

\item{nr_features}{number of features to select in each elementary model}

\item{method}{a vector denoting the method(s) used as elementary models; options: "mRMR", "Laplacian score"}

\item{A}{the matrix defining the constraint system Ax<=b}

\item{b}{the vector defining the constraint system Ax<=b}

\item{rho}{the vector of relaxation parameters for the constraint system Ax<=b}

\item{weights}{the vector of user-defined prior weights for each feature}

\item{popsize}{size of the initial population of the genetic algorithm for model optimization}

\item{maxiter}{maximum number of iterations of the genetic algorithm for model optimization}

\item{shiny}{TRUE indicates that the function is called from Shiny dashboard}
}
\value{
a UBaymodel object containing the following list elements: data, target, user.params (parameters representing user knowledge), ensemble.params (parameters representing the likelihood) and optim.params (parameters for genetic algorithm)
}
\description{
builds a data structure for UBayFS and trains an ensemble of elementary feature selectors
}
\details{
The function aggregates input parameters for UBayFS - including data, parameters defining ensemble and user knowledge and parameters specifying the optimization procedure - and trains the ensemble model
}
\examples{
# build a UBayFS model using Wisconsin breast cancer dataset
d <- loadWisconsin() # dataset
c <- buildConstraints("max_size", list(10), ncol(d$data), rho = 1) # prior constraints
w <- rep(1, ncol(d$data)) # weights
model <- build.UBaymodel(
                     data = d$data,
                     target = d$labels,
                     A = c$A,
                     b = c$b,
                     rho = c$rho,
                     weights = w
)
}
